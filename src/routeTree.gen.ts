/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RegisterImport } from './routes/register'
import { Route as LoginImport } from './routes/login'
import { Route as AuthImport } from './routes/_auth'
import { Route as IndexImport } from './routes/index'
import { Route as AuthUsersImport } from './routes/_auth/users'
import { Route as AuthUserProfileImport } from './routes/_auth/user-profile'
import { Route as AuthModuleProfilesImport } from './routes/_auth/module-profiles'
import { Route as AuthMainImport } from './routes/_auth/main'
import { Route as AuthHelpImport } from './routes/_auth/help'
import { Route as AuthAuditlogsImport } from './routes/_auth/audit_logs'
import { Route as AuthAdminImport } from './routes/_auth/admin'
import { Route as AuthAboutImport } from './routes/_auth/about'

// Create/Update Routes

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthUsersRoute = AuthUsersImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => AuthRoute,
} as any)

const AuthUserProfileRoute = AuthUserProfileImport.update({
  id: '/user-profile',
  path: '/user-profile',
  getParentRoute: () => AuthRoute,
} as any)

const AuthModuleProfilesRoute = AuthModuleProfilesImport.update({
  id: '/module-profiles',
  path: '/module-profiles',
  getParentRoute: () => AuthRoute,
} as any)

const AuthMainRoute = AuthMainImport.update({
  id: '/main',
  path: '/main',
  getParentRoute: () => AuthRoute,
} as any)

const AuthHelpRoute = AuthHelpImport.update({
  id: '/help',
  path: '/help',
  getParentRoute: () => AuthRoute,
} as any)

const AuthAuditlogsRoute = AuthAuditlogsImport.update({
  id: '/audit_logs',
  path: '/audit_logs',
  getParentRoute: () => AuthRoute,
} as any)

const AuthAdminRoute = AuthAdminImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => AuthRoute,
} as any)

const AuthAboutRoute = AuthAboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => AuthRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/_auth/about': {
      id: '/_auth/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AuthAboutImport
      parentRoute: typeof AuthImport
    }
    '/_auth/admin': {
      id: '/_auth/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AuthAdminImport
      parentRoute: typeof AuthImport
    }
    '/_auth/audit_logs': {
      id: '/_auth/audit_logs'
      path: '/audit_logs'
      fullPath: '/audit_logs'
      preLoaderRoute: typeof AuthAuditlogsImport
      parentRoute: typeof AuthImport
    }
    '/_auth/help': {
      id: '/_auth/help'
      path: '/help'
      fullPath: '/help'
      preLoaderRoute: typeof AuthHelpImport
      parentRoute: typeof AuthImport
    }
    '/_auth/main': {
      id: '/_auth/main'
      path: '/main'
      fullPath: '/main'
      preLoaderRoute: typeof AuthMainImport
      parentRoute: typeof AuthImport
    }
    '/_auth/module-profiles': {
      id: '/_auth/module-profiles'
      path: '/module-profiles'
      fullPath: '/module-profiles'
      preLoaderRoute: typeof AuthModuleProfilesImport
      parentRoute: typeof AuthImport
    }
    '/_auth/user-profile': {
      id: '/_auth/user-profile'
      path: '/user-profile'
      fullPath: '/user-profile'
      preLoaderRoute: typeof AuthUserProfileImport
      parentRoute: typeof AuthImport
    }
    '/_auth/users': {
      id: '/_auth/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof AuthUsersImport
      parentRoute: typeof AuthImport
    }
  }
}

// Create and export the route tree

interface AuthRouteChildren {
  AuthAboutRoute: typeof AuthAboutRoute
  AuthAdminRoute: typeof AuthAdminRoute
  AuthAuditlogsRoute: typeof AuthAuditlogsRoute
  AuthHelpRoute: typeof AuthHelpRoute
  AuthMainRoute: typeof AuthMainRoute
  AuthModuleProfilesRoute: typeof AuthModuleProfilesRoute
  AuthUserProfileRoute: typeof AuthUserProfileRoute
  AuthUsersRoute: typeof AuthUsersRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthAboutRoute: AuthAboutRoute,
  AuthAdminRoute: AuthAdminRoute,
  AuthAuditlogsRoute: AuthAuditlogsRoute,
  AuthHelpRoute: AuthHelpRoute,
  AuthMainRoute: AuthMainRoute,
  AuthModuleProfilesRoute: AuthModuleProfilesRoute,
  AuthUserProfileRoute: AuthUserProfileRoute,
  AuthUsersRoute: AuthUsersRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthRouteWithChildren
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/about': typeof AuthAboutRoute
  '/admin': typeof AuthAdminRoute
  '/audit_logs': typeof AuthAuditlogsRoute
  '/help': typeof AuthHelpRoute
  '/main': typeof AuthMainRoute
  '/module-profiles': typeof AuthModuleProfilesRoute
  '/user-profile': typeof AuthUserProfileRoute
  '/users': typeof AuthUsersRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthRouteWithChildren
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/about': typeof AuthAboutRoute
  '/admin': typeof AuthAdminRoute
  '/audit_logs': typeof AuthAuditlogsRoute
  '/help': typeof AuthHelpRoute
  '/main': typeof AuthMainRoute
  '/module-profiles': typeof AuthModuleProfilesRoute
  '/user-profile': typeof AuthUserProfileRoute
  '/users': typeof AuthUsersRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteWithChildren
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/_auth/about': typeof AuthAboutRoute
  '/_auth/admin': typeof AuthAdminRoute
  '/_auth/audit_logs': typeof AuthAuditlogsRoute
  '/_auth/help': typeof AuthHelpRoute
  '/_auth/main': typeof AuthMainRoute
  '/_auth/module-profiles': typeof AuthModuleProfilesRoute
  '/_auth/user-profile': typeof AuthUserProfileRoute
  '/_auth/users': typeof AuthUsersRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/login'
    | '/register'
    | '/about'
    | '/admin'
    | '/audit_logs'
    | '/help'
    | '/main'
    | '/module-profiles'
    | '/user-profile'
    | '/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/login'
    | '/register'
    | '/about'
    | '/admin'
    | '/audit_logs'
    | '/help'
    | '/main'
    | '/module-profiles'
    | '/user-profile'
    | '/users'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/login'
    | '/register'
    | '/_auth/about'
    | '/_auth/admin'
    | '/_auth/audit_logs'
    | '/_auth/help'
    | '/_auth/main'
    | '/_auth/module-profiles'
    | '/_auth/user-profile'
    | '/_auth/users'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRouteWithChildren
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRouteWithChildren,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth",
        "/login",
        "/register"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/about",
        "/_auth/admin",
        "/_auth/audit_logs",
        "/_auth/help",
        "/_auth/main",
        "/_auth/module-profiles",
        "/_auth/user-profile",
        "/_auth/users"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/_auth/about": {
      "filePath": "_auth/about.tsx",
      "parent": "/_auth"
    },
    "/_auth/admin": {
      "filePath": "_auth/admin.tsx",
      "parent": "/_auth"
    },
    "/_auth/audit_logs": {
      "filePath": "_auth/audit_logs.tsx",
      "parent": "/_auth"
    },
    "/_auth/help": {
      "filePath": "_auth/help.tsx",
      "parent": "/_auth"
    },
    "/_auth/main": {
      "filePath": "_auth/main.tsx",
      "parent": "/_auth"
    },
    "/_auth/module-profiles": {
      "filePath": "_auth/module-profiles.tsx",
      "parent": "/_auth"
    },
    "/_auth/user-profile": {
      "filePath": "_auth/user-profile.tsx",
      "parent": "/_auth"
    },
    "/_auth/users": {
      "filePath": "_auth/users.tsx",
      "parent": "/_auth"
    }
  }
}
ROUTE_MANIFEST_END */
